{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/tcp-ip","result":{"data":{"post":{"__typename":"MdxPost","slug":"/tcp-ip","title":"TCP/IP 协议系统学习","date":"13.10.2020","tags":[{"name":"Android","slug":"android"}],"description":"TCP/IP 协议是由一系列协议组成的网络分层模型","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"TCP/IP 协议系统学习\",\n  \"description\": \"TCP/IP 协议是由一系列协议组成的网络分层模型\",\n  \"date\": \"2020-10-13T00:00:00.000Z\",\n  \"slug\": \"/tcp-ip\",\n  \"tags\": [\"Android\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"\\u534F\\u8BAE\\u65CF\\uFF1F\"), mdx(\"p\", null, \"\\u7531\\u4E00\\u7CFB\\u5217\\u534F\\u8BAE\\u7EC4\\u6210\\u7684\\u7F51\\u7EDC\\u5206\\u5C42\\u6A21\\u578B\"), mdx(\"h2\", null, \"\\u4E3A\\u4EC0\\u4E48\\u8981\\u5206\\u5C42\"), mdx(\"p\", null, \"\\u7F51\\u7EDC\\u4E0D\\u7A33\\u5B9A\\uFF0C\\u9700\\u8981\\u5206\\u5757\\u4F20\\u8F93\\uFF0C\\u56E0\\u6B64\\u9700\\u8981\\u5206\\u5C42\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u5E94\\u7528\\u5C42\\uFF08HTTP\\u3001FTP\\u3001DNS\\uFF09\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u4F20\\u8F93\\u5C42\\uFF08TCP\\u5C42 \\u9700\\u8981\\u91CD\\u4F20\\uFF0CUDP\\u5C42 \\u4E0D\\u9700\\u8981\\u91CD\\u4F20\\uFF09\\uFF08\\u53EA\\u8D1F\\u8D23\\u62C6\\u5757\\uFF0C\\u62FC\\u63A5\\u5757\\uFF09\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u7F51\\u7EDC\\u5C42\\uFF08IP\\u5C42\\uFF09\\uFF08\\u53EA\\u8D1F\\u8D23\\u4F20\\u8F93\\uFF09\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u6570\\u636E\\u94FE\\u8DEF\\u5C42\\uFF08\\u4EE5\\u592A\\u7F51\\uFF0Cwifi...\\u4E3A\\u7F51\\u7EDC\\u63D0\\u4F9B\\u73B0\\u5B9E\\u4E16\\u754C\\u7684\\u7269\\u7406\\u652F\\u6301\\uFF09\")), mdx(\"h2\", null, \"TCP \\u8FDE\\u63A5\"), mdx(\"p\", null, \"TCP \\u662F\\u4E00\\u79CD\\u6709\\u72B6\\u6001\\u7684\\u4EA4\\u4E92\\uFF08\\u533A\\u522B\\u4E8E HTTP\\uFF09\"), mdx(\"p\", null, \"\\u56E0\\u4E3A\\u4ED6\\u662F\\u6709\\u72B6\\u6001\\u7684\\uFF0C\\u5C31\\u9700\\u8981\\u5728\\u8FDE\\u63A5\\u4E4B\\u5904\\u5EFA\\u7ACB\\u8FDE\\u63A5\\uFF0C\\u4E0D\\u7528\\u4E4B\\u540E\\u9700\\u8981\\u65AD\\u5F00\\u8FDE\\u63A5\"), mdx(\"p\", null, \"java \\u91CC\\u9762\\u901A\\u8FC7 Socket \\u5EFA\\u7ACB TCP \\u8FDE\\u63A5\"), mdx(\"h3\", null, \"TCP \\u8FDE\\u63A5\\u7684\\u5EFA\\u7ACB\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\u6211\\u8981\\u7ED9\\u4F60\\u53D1\\u6D88\\u606F\\u4E86\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\u6211\\u77E5\\u9053\\u4F60\\u7ED9\\u6211\\u53D1\\u6D88\\u606F\\u4E86\\uFF0C\\u540C\\u65F6\\u6211\\u4E5F\\u8981\\u7ED9\\u4F60\\u53D1\\u6D88\\u606F\\u4E86\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\u6211\\u4E5F\\u77E5\\u9053\\u4F60\\u7ED9\\u6211\\u53D1\\u6D88\\u606F\\u4E86\")), mdx(\"h3\", null, \"TCP \\u8FDE\\u63A5\\u7684\\u5173\\u95ED\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\u4E3A\\u4EC0\\u4E48\\u8981\\u5173\\u95ED\\uFF1F\\u8282\\u7701\\u8D44\\u6E90\")), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\u6211\\u6CA1\\u6709\\u6D88\\u606F\\u4E86\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\u6211\\u77E5\\u9053\\u4E86\\u4F60\\u6CA1\\u6709\\u6D88\\u606F\\u4E86\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\u6211\\u4E5F\\u6CA1\\u6709\\u6D88\\u606F\\u4E86\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\u6211\\u77E5\\u9053\\u4E86\\u4F60\\u4E5F\\u6CA1\\u6709\\u6D88\\u606F\\u53D1\\u4E86\")), mdx(\"h3\", null, \"\\u957F\\u8FDE\\u63A5\"), mdx(\"p\", null, \"\\u4E3A\\u4EC0\\u4E48\\u9700\\u8981\\u957F\\u8FDE\\u63A5\\uFF0C\\u56E0\\u4E3A\\u8FD0\\u8425\\u5546\\u4F1A\\u628A TCP \\u8FDE\\u63A5\\u5173\\u95ED\\u3002\"), mdx(\"p\", null, \"\\u4F7F\\u7528\\u5FC3\\u8DF3\\uFF01\\uFF01\\uFF01\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"协议族？ 由一系列协议组成的网络分层模型 为什么要分层 网络不稳定，需要分块传输，因此需要分层 应用层（HTTP、FTP、DNS） 传输层（TCP层 需要重传，UDP层 不需要重传）（只负责拆块，拼接块） 网络层（IP层）（只负责传输） 数据链路层（以太网，wifi…","timeToRead":1,"banner":null}},"pageContext":{"slug":"/tcp-ip","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["3090400250","3090400250","318001574"]}